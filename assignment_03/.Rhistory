import sqlite3
import pandas as pd
# Connect to the database (will create it if not exists)
conn = sqlite3.connect("population_USA.db")
cur = conn.cursor()
# ---------------------------------
# QUESTION 1: US State Populations
# ---------------------------------
# Load state data from CSV
df_states = pd.read_csv("US_state_pop_area.csv")
# Create and populate the Density table
cur.execute("DROP TABLE IF EXISTS Density")
cur.execute("""
CREATE TABLE Density (
State TEXT,
Population INTEGER,
Area REAL
)
""")
df_states.to_sql("Density", conn, if_exists="append", index=False)
# d) Retrieve all records
print("\n[d] All states and data:")
cur.execute("SELECT * FROM Density")
print(cur.fetchall())
# e) Retrieve populations
print("\n[e] Populations:")
cur.execute("SELECT Population FROM Density")
print(cur.fetchall())
# f) States with population < 1 million
print("\n[f] States with population < 1M:")
cur.execute("SELECT State FROM Density WHERE Population < 1000000")
print(cur.fetchall())
# g) States with pop < 1M OR > 5M
print("\n[g] States with pop < 1M OR > 5M:")
cur.execute("SELECT State FROM Density WHERE Population < 1000000 OR Population > 5000000")
print(cur.fetchall())
# h) States NOT (<1M or >5M)
print("\n[h] States with pop BETWEEN 1M AND 5M:")
cur.execute("SELECT State FROM Density WHERE NOT (Population < 1000000 OR Population > 5000000)")
print(cur.fetchall())
# ---------------------------------
# QUESTION 2: Capital City Data
# ---------------------------------
# Load capital data from CSV
df_capitals = pd.read_csv("US_cap_cities_pop.csv")
# Create and populate the Capitals table
cur.execute("DROP TABLE IF EXISTS Capitals")
cur.execute("""
CREATE TABLE Capitals (
State TEXT,
Capital TEXT,
Area REAL,
Population INTEGER
)
""")
df_capitals.to_sql("Capitals", conn, if_exists="append", index=False)
# a) Retrieve all capital records
print("\n[a] All capital cities:")
cur.execute("SELECT * FROM Capitals")
print(cur.fetchall())
# b) List of tuples: [state population, capital population]
print("\n[b] [State pop, Capital pop]:")
cur.execute("""
SELECT Density.State, Density.Population, Capitals.Population
FROM Density JOIN Capitals ON Density.State = Capitals.State
""")
print(cur.fetchall())
# c) Land area of states where capital pop > 100,000
print("\n[c] State areas where capital pop > 100K:")
cur.execute("""
SELECT Density.State, Density.Area
FROM Density JOIN Capitals
ON Density.State = Capitals.State
WHERE Capitals.Population > 100000
""")
print(cur.fetchall())
# d) States with density > 10 AND capital pop > 500K
print("\n[d] States with density > 10 and capital pop > 500K:")
cur.execute("""
SELECT Density.State
FROM Density JOIN Capitals
ON Density.State = Capitals.State
WHERE (Density.Population / Density.Area) > 10
AND Capitals.Population > 500000
""")
print(cur.fetchall())
# e) Total land area of the US
print("\n[e] Total land area of US:")
cur.execute("SELECT SUM(Area) FROM Density")
print(cur.fetchone())
# f) Average capital city population
print("\n[f] Average capital population:")
cur.execute("SELECT AVG(Population) FROM Capitals")
print(cur.fetchone())
# g) Lowest capital population
print("\n[g] Lowest capital population:")
cur.execute("SELECT MIN(Population) FROM Capitals")
print(cur.fetchone())
# h) Highest state population
print("\n[h] Highest state population:")
cur.execute("SELECT MAX(Population) FROM Density")
print(cur.fetchone())
# Close connection
conn.close()
